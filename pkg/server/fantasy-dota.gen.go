// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"github.com/labstack/echo/v4"
)

// ExampleRequest defines model for ExampleRequest.
type ExampleRequest struct {
	Name string `json:"name"`
}

// ExampleResponse defines model for ExampleResponse.
type ExampleResponse struct {
	Name string `json:"name"`
}

// PostExampleJSONBody defines parameters for PostExample.
type PostExampleJSONBody = ExampleRequest

// PostExampleJSONRequestBody defines body for PostExample for application/json ContentType.
type PostExampleJSONRequestBody = PostExampleJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Example GET handler.
	// (GET /example)
	GetExample(ctx echo.Context) error
	// Example POST handler.
	// (POST /example)
	PostExample(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetExample converts echo context to params.
func (w *ServerInterfaceWrapper) GetExample(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetExample(ctx)
	return err
}

// PostExample converts echo context to params.
func (w *ServerInterfaceWrapper) PostExample(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostExample(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/example", wrapper.GetExample)
	router.POST(baseURL+"/example", wrapper.PostExample)

}
